[{"content":"快速扫盲 深度学习(deeplearning)包含很多向量或矩阵的运算，因此对线性代数有足够的了解是非常必要的\n其中最主要的知识点包括：\n标量、向量、矩阵和张量，以及矩阵的转置运算\n矩阵和向量乘法\n矩阵乘法 (叉乘) $$ C_{i, j}=\\sum_{k} A_{i, k} B_{k, j} $$ Hadamard乘积 指两个矩阵中对应元素的乘积 单位矩阵和逆矩阵\n线性相关和线性无关\n生成子空间\n范数\n正交矩阵和标准正交\n特征分解（平衡分布） $$ A = QAQ^T $$ 奇异值分解\nMoore- Penrose伪逆\n迹运算\n行列式\n教材资源：线性代数与解析几何\n提取码：5sz2\n","date":"2024-09-17T21:00:13+08:00","permalink":"https://Sazerac-kk.github.io/p/linear_algebra/","title":"Linear_algebra"},{"content":"matplotlib.pyplot是 matplotlib 的基于状态的接口。它提供了一种隐式的、类似 MATLAB 的绘图方式。它还会在屏幕上打开图形，并充当图形 GUI 管理器。\n1、显示窗口和隐式窗口 1）pyplot 主要用于交互式绘图和程序化绘图生成的简单情况，而对于复杂绘图，建议使用显示的面向对象的API，此时pyplot用于创建图形有一集图形中的轴。\n2）请参阅pyplot.figure、pyplot.subplots、 和 pyplot.subplot_mosaic创建图形，以及 轴 API以了解轴上的绘图方法。有关隐式接口和显式接口之间权衡的说明，请参阅Matplotlib 应用程序接口 (API) 。\n2、管理图像和轴 1)axes:将Axes添加到当前图形并使其成为当前Axes。 Call signatures:\nParameters:\narg : None or 4-tuple\n​\tNone:一个用subplot(**kwargs)生成的新的窗口Axes\n​\t4-tuple : rect = (left, bottom, width, height)，以此为标准创建了一个新的轴。\nProjection:{None, \u0026lsquo;aitoff\u0026rsquo;, \u0026lsquo;hammer\u0026rsquo;, \u0026rsquo;lambert\u0026rsquo;, \u0026lsquo;mollweide\u0026rsquo;, \u0026lsquo;polar\u0026rsquo;, \u0026lsquo;rectilinear\u0026rsquo;, str}\n​\t可选的投影类型，None代表直线\n​\t详情见：projections\n​\tmatplotlib.projections.get_projection_names()返回当前注册的所有投影的名称\nPolar: bool, default ,:False # 极性\n​\t如果为True 代表投影=‘极坐标’\nSharex, sharey: Axes ,可选：\n​\taxis与 sharex 和/或 sharey共享 x 或 y 。该轴将具有与共享轴相同的限制、刻度和比例。\nLabel: str\n​\tAxes返回的标签\nReturn：\n​\tAxes或者子类Axes：\n​\t返回的类型取决于projection，直线：Axes; 极坐标：projections.polar.PolarAxes\n其他参数：\n​\tkwargs：详情请见axes\n2）其他: axes 将 Axes 添加到当前图形并使其成为当前 Axes。 cla 清除当前轴。 clf 清除当前数字。 close 关闭图形窗口。 delaxes Axes从图中删除一个（默认为当前轴）。 fignum_exists 返回给定 id 的图窗是否存在。 figure 创建新图窗，或激活现有图窗。 gca 获取当前的轴。 gcf 获取当前数字。 get_figlabels 返回现有图形标签的列表。 get_fignums 返回现有图号的列表。 sca 将当前 Axes 设置为ax并将当前Figure 设置为ax的父级。 subplot 将轴添加到当前图形或检索现有轴。 subplot2grid 在常规网格内的特定位置创建子图。 subplot_mosaic 基于 ASCII 艺术或嵌套列表构建轴布局。 subplots 创建一个图形和一组子图。 twinx 制作并返回共享x轴的第二个轴。 twiny 创建并返回共享y轴的第二个轴。 3、将数据添加到图中 基本：\nplot 将 y 与 x 绘制为线条和/或标记。 errorbar 将 y 与 x 绘制为带有误差条的线条和/或标记。 scatter y与y的散点图 plot_date [不鼓励] 绘制强制轴将浮点数视为日期的图。 step 制作一个步骤图。 loglog 在 x 轴和 y 轴上绘制对数缩放图。 semilogx 在 x 轴上绘制对数缩放图。 semilogy 在 y 轴上绘制对数缩放图。 fill_between 填充两条水平曲线之间的区域。 fill_betweenx 填充两条垂直曲线之间的区域。 bar 绘制条形图。 barh 绘制水平条形图。 bar_label 标记条形图。 stem 创建一个茎图。 eventplot 在给定位置绘制相同的平行线。 pie 绘制饼图。 stackplot 绘制堆积面积图。 broken_barh 绘制矩形的水平序列。 vlines 在每个x 处绘制从ymin到ymax 的垂直线。 hlines 在每个y 处绘制从xmin到xmax 的水平线。 fill 绘制填充多边形。 polar 绘制极坐标图。 二维数组：\nimshow 将数据显示为图像，即在二维规则光栅上。 matshow 在新的图窗窗口中将数组显示为矩阵。 pcolor 使用不规则矩形网格创建伪彩色图。 pcolormesh 使用不规则矩形网格创建伪彩色图。 spy 绘制二维数组的稀疏模式。 figimage 将未重新采样的图像添加到图中。 文本和注释：\nannotate 用文本text注释点xy。 text 将文本添加到轴。 figtext 向图中添加文本。 table 将表添加到Axes. arrow 向轴添加箭头。 figlegend 在图上放置图例。 legend 在轴上放置一个图例。 4、轴配置： autoscale 根据数据自动缩放轴视图（切换）。 axis 获取或设置某些轴属性的便捷方法。 box 打开或关闭当前轴上的轴框。 grid 配置网格线。 locator_params 主要蜱虫定位器的控制行为。 minorticks_off 删除轴上的小刻度。 minorticks_on 在轴上显示小刻度。 rgrids 获取或设置当前极坐标图上的径向网格线。 thetagrids 获取或设置当前极坐标图上的 theta 网格线。 tick_params 更改刻度、刻度标签和网格线的外观。 ticklabel_format 配置ScalarFormatter线性轴的默认使用。 xlabel 设置 x 轴的标签。 xlim 获取或设置当前轴的 x 限制。 xscale 设置 x 轴的比例。 xticks 获取或设置 x 轴的当前刻度位置和标签。 ylabel 设置 y 轴的标签。 ylim 获取或设置当前轴的 y 限制。 yscale 设置 y 轴的比例。 yticks 获取或设置 y 轴的当前刻度位置和标签。 suptitle 向图中添加居中的副标题。 title 为轴设置标题。 5、布局： margins 设置或检索自动缩放边距。 subplots_adjust 调整子图布局参数。 subplot_tool 启动图形的子图工具窗口。 tight_layout 调整子图之间和子图周围的填充。 6、颜色映射： clim 设置当前图像的颜色限制。 colorbar 将颜色条添加到绘图中。 gci 获取当前的可着色艺术家。 sci 设置当前图像。 get_cmap 获取一个颜色图实例，如果name为 None，则默认为 rc 值。 set_cmap 设置默认颜色图，并将其应用到当前图像（如果有）。 imread 将图像从文件读取到数组中。 imsave 颜色映射并将数组保存为图像文件。 7、输出： draw 重新绘制当前图形。 draw_if_interactive 如果处于交互模式，则重绘当前图形。 ioff 禁用交互模式。 ion 启用交互模式。 install_repl_displayhook 连接到当前shell的显示钩子。 isinteractive 返回每个绘图命令后是否更新绘图。 pause 将 GUI 事件循环运行间隔秒。 savefig 保存当前图形。 show 显示所有开放数字。 switch_backend 设置 pyplot 后端。 uninstall_repl_displayhook 与当前 shell 的显示挂钩断开连接。 8、其他详见： https://matplotlib.org/stable/api/pyplot_summary.html\n","date":"2024-09-17T00:00:00Z","image":"https://Sazerac-kk.github.io/p/the-use-of-matplotlib/image_hu13700394000997497419.png","permalink":"https://Sazerac-kk.github.io/p/the-use-of-matplotlib/","title":"The use of matplotlib"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://Sazerac-kk.github.io/p/math-typesetting/","title":"Math Typesetting"}]