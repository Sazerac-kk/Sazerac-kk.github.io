[{"content":"1. 登录AutoDL算力云 当然也有免费的平台\nkaggle：\n不需要科学上网，但是文件加载有些麻烦，我第一次尝试失败（应该是我的问题），每个月有30个小时的GPU时长。\ncolab：需要科学上网，响应比较慢，但是传文件挺快的，没有conda，而且不知道为什么python版本限制在3.7改也改不回来。\nAutoDL网址：https://www.autodl.com/\n可以登录我的账号。 可以开发票（最爽！）。 更接近于原生ubuntu，有jupyter和script等选择。 显卡比较贵，而且晚上未必有。 支持vscode远程连接！！！！ 2. 加载+配置环境【最痛苦的一集】 首先，选择空闲卡，配置基础环境。\n先用最接近的，创建好之后还可以改。\n进入控制台 - \u0026gt; 容器实例，查看SSH登录（也可直接在平台登陆）。\n打开vscode，进入远程资源管理器，点击“+”，新建远程，填入登陆指令和密码。\n进入后打开终端，会出现以下提示，说明连接成功。\n创建文件夹Working，按照指令，先建立conda环境\n1 2 conda create -n regionclip python=3.9 # 创建环境 source activate regionclip # 进入环境 下载pytorch和cuda，作者给的指令貌似有些问题。\n1 pip install torch==1.10.1+cu111 torchvision==0.11.2+cu111 torchaudio==0.10.1 -f https://download.pytorch.org/whl/cu111/torch_stable.html 这条指令没什么问题。\n将代码下载。\n1 2 3 git clone git@github.com:microsoft/RegionCLIP.git # 或者 git clone https://github.com/microsoft/RegionCLIP.git 配置基本环境。（这里bug非常多）\n```python python -m pip install -e RegionCLIP ``` - 运行这一条发现会出现这种情况： ![image-20240924221913196](https://cdn.jsdelivr.net/gh/Sazerac-kk/pictures/img/202409242303172.png) - 很多教程里面都没有提到这个内容，其实这是由于`setuptools`版本不兼容导致，应当运行以下代码： ```python pip install setuptools==59 ``` [setup issue · Issue #60 · microsoft/RegionCLIP (github.com)](https://github.com/microsoft/RegionCLIP/issues/60) - 但是这并不能完全解决问题，例如我仍然运行配置环境的代码，会出现以下错误： ``` Obtaining file:///mnt/d/ZYY/RegionCLIP Preparing metadata (setup.py) ... done ERROR: Exception: Traceback (most recent call last): File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/cli/base_command.py\u0026quot;, line 105, in _run_wrapper status = _inner_run() File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/cli/base_command.py\u0026quot;, line 96, in _inner_run return self.run(options, args) File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/cli/req_command.py\u0026quot;, line 67, in wrapper return func(self, options, args) File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/commands/install.py\u0026quot;, line 379, in run requirement_set = resolver.resolve( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/resolver.py\u0026quot;, line 76, in resolve collected = self.factory.collect_root_requirements(root_reqs) File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py\u0026quot;, line 539, in collect_root_requirements reqs = list( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py\u0026quot;, line 495, in _make_requirements_from_install_req cand = self._make_base_candidate_from_link( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/factory.py\u0026quot;, line 211, in _make_base_candidate_from_link self._editable_candidate_cache[link] = EditableCandidate( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py\u0026quot;, line 328, in init super().init( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py\u0026quot;, line 158, in init self.dist = self._prepare() File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py\u0026quot;, line 235, in _prepare dist = self._prepare_distribution() File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/resolution/resolvelib/candidates.py\u0026quot;, line 338, in _prepare_distribution return self._factory.preparer.prepare_editable_requirement(self._ireq) File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/operations/prepare.py\u0026quot;, line 698, in prepare_editable_requirement dist = _get_prepared_distribution( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/operations/prepare.py\u0026quot;, line 72, in _get_prepared_distribution abstract_dist.prepare_distribution_metadata( File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/distributions/sdist.py\u0026quot;, line 69, in prepare_distribution_metadata self.req.prepare_metadata() File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/req/req_install.py\u0026quot;, line 591, in prepare_metadata self._set_requirement() File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_internal/req/req_install.py\u0026quot;, line 394, in _set_requirement if isinstance(parse_version(self.metadata[\u0026quot;Version\u0026quot;]), Version): File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_vendor/packaging/version.py\u0026quot;, line 56, in parse return Version(version) File \u0026quot;/home/frain/micromamba/envs/region/lib/python3.9/site-packages/pip/_vendor/packaging/version.py\u0026quot;, line 202, in init raise InvalidVersion(f\u0026quot;Invalid version: '{version}'\u0026quot;) pip._vendor.packaging.version.InvalidVersion: Invalid version: 'RegionCLIP' ``` - 这需要我们对`setup.py`文件进行配置，将 `version=get_version()` 改成 `version='0.1.0'` 。 - 然后就可以运行了。 然后配置额外的环境\n1 2 pip install opencv-python timm diffdist h5py scikit-learn ftfy pip install git+https://github.com/lvis-dataset/lvis-api.git 应该会比较顺利\n3. 下载预训练数据和数据集 这里面没什么好说的，按照教程下载即可，但注意预训练数据只需要按需下载，在以下的教程中，只需要下载pretrained_ckpt/concept_emb/lvis_1203_cls_emb_rn50x4.pth和pretrained_ckpt/regionclip/regionclip_pretrained-cc_rn50x4.pth文件（文件路径需要存在）。\n​\tregionclip 服务器复现 - 知乎 (zhihu.com)\n4. 测试运行 以下代码：\n1 2 3 4 5 6 7 8 9 10 python3 ./tools/train_net.py \\ --eval-only \\ --num-gpus 1 \\ --config-file ./configs/LVISv1-InstanceSegmentation/CLIP_fast_rcnn_R_50_C4_custom_img.yaml \\ MODEL.WEIGHTS ./pretrained_ckpt/regionclip/regionclip_pretrained-cc_rn50x4.pth \\ MODEL.CLIP.TEXT_EMB_PATH ./pretrained_ckpt/concept_emb/lvis_1203_cls_emb_rn50x4.pth \\ MODEL.CLIP.OFFLINE_RPN_CONFIG ./configs/LVISv1-InstanceSegmentation/mask_rcnn_R_50_FPN_1x.yaml \\ MODEL.CLIP.TEXT_EMB_DIM 640 \\ MODEL.RESNETS.DEPTH 200 \\ MODEL.ROI_BOX_HEAD.POOLER_RESOLUTION 18\\ 可视化：\n1 2 3 4 5 6 7 8 python ./tools/visualize_json_results.py \\ --input ./output/inference/lvis_instances_results.json \\ --output ./output/regions \\ --dataset lvis_v1_val_custom_img \\ --conf-threshold 0.05 \\ --show-unique-boxes \\ --max-boxes 25 \\ --small-region-px 8100\\ 终端运行即可。\n可能会遇到的问题：\n1 _C.cpython-36m-x86_64-linux-gnu.so: undefined symbol: _ZN2at19UndefinedTensorImpl10_singletonE 这个好像是pytorch重复编译的问题，解决办法：\n1 remove -r build # 在RegionCLIP文件夹下 1 pip install -v -e # 在有setup.py的文件夹下 等待时间比较长，运行结束问题解决！\n5. My_RegionCLIP 我在原microsoft的RegionCLIP文件上进行了环境配置，生成了requirements.txt文件，可以一键配置环境。\n1 conda install --yes --file requirements.txt 另外，测试脚本也写好，在./run文件夹下面，可直接用sh run/run1.sh和sh run/run2.sh来运行。但是数据集和预训练数据过大，就没有再GitHub上传。\n仓库地址：https://github.com/Sazerac-kk/My_RegionCLIP.git\n","date":"2024-09-24T23:02:07+08:00","permalink":"https://Sazerac-kk.github.io/p/regionclip%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","title":"RegionCLIP踩坑记录"},{"content":"深度学习基础：线性回归 1. 什么是线性回归？ 线性回归是一种简单常用的有监督机器学习方法，虽然相对于其他回归分析方法，线性回归最为简单且乏味，但很多新学习方法仍以线性回归为基础，因此认证学习并掌握线性回归方法仍是很重要的\n2. 常见的回归分析方法 线性回归(Linear Regression) 逻辑回归（Logistic regressions） 多项式回归(Polynomial Regression) 逐步回归(Step Regression) 岭回归(Ridge Regression) 套索回归(Lasso Regression) 弹性网回归(ElasticNet) 3. 线性回归的适用范围 自变量与因变量之间存在线性关系。\n各观测间相互独立。\n残差e 服从正态分布N(0,σ2) 。其方差σ2 = var (ei) 反映了回归模型的精度， σ 越小，用所得到回归模型预测y的精确度愈高。\ne 的大小不随所变量取值水平的改变而改变，即方差齐性。\n观察上图，这是统计学家安斯库姆给出的四个数据集，被称为安斯库姆四重奏。从这四个数据集分布可以看出，不是所有数据集都可以用一元线性回归来建模，因此使用线性回归，应当满足以下假设：\n线性回归是一个回归问题。 要预测的变量 y 与自变量 x 的关系是线性的（图2 是一个非线性）。 各项误差服从正太分布，均值为0，与 x 同方差（图4 误差不是正太分布）。 变量 x 的分布要有变异性。 多元线性回归中不同特征之间应该相互独立，避免线性相关。 3. 一元线性回归模型 3.1 基本模型 假设给定数据集如下图所示：\n一元线性回归就是找到一个函数 $$ f(x_i) = mx_i + b \\tag{0} $$ 使得对任意$ x_i $，有$ f(x_i) \\approx y_i $ 。\n我们尝试多种参数m和b的组合，的得到以上的图像，那么我们监督学习的过程就可以描述为：\n给定N个数据对(x,y)，找出最合适的参数m与b，是模型能够更好得拟合这些数据。（还是很易于理解的的~）\n3.2 怎样衡量线性函数的好坏 上图给了很多条拟合直线，那么那一条是最符合要求的呢？人类有时可以用肉眼来分辨，但是计算机不行。实质上，计算机使用损失函数（loss function）来衡量这个问题，同时它又被称为代价函数（cost function）【PS：我比较喜欢使用cost function】。顾名思义，代价函数衡量了真实值$y$与预测值$\\hat y$之间的差异程度，一般的代价函数表示如下： $$ L( \\widehat {y}_ {i} , y_ {i} )= (\\widehat {y}_ {i}-y_ {i})^ {2} \\tag{1} $$ 公式1表示单个样本上预测值与真实值的误差。 $$ L(\\widehat{y}, y)=\\frac{1}{N} \\sum_{i=1}^{N}\\left(\\widehat{y_{i}}-y_{i}\\right)^{2} \\tag{2} $$ $L(\\hat y , y)$表示所有误差的平均值。\n那么为什么损失函数采用的是平方和而不是绝对值呢，这是由于平方和具有最小值存在，可利用求导的方式求取最小值，但是绝对值没有则个特性。\n我们的任务：找出最合适的$m^$和$b^$ $$ m^*,b^*=\\underset{m,b}{\\arg\\min}L(m,b)=\\underset{m,b}{\\arg\\min}\\frac{1}{N}\\sum_{i=1}^N[(mx_i+b)-y_i]^2 \\tag{3} $$3.3 最小二乘法参数求解 我们直接跳过理论知识，若有不了解，可参考这篇文章最小二乘法的原理理解。\n那么对于公式4直接对$m$和$b$求导，导数为0时，损失函数最小。 $$ \\begin{aligned} \u0026\\frac{\\partial}{\\partial m}L(m,b)=\\frac{2}{N}\\sum_{i=1}^{N}x_{i}(mx_{i}+b-y_{i})\u0026 \\left(4\\right) \\\\ \u0026=2m(\\frac{1}{N}\\sum_{i=1}^{N}{x_{i}}^{2})+2b(\\frac{1}{N}\\sum_{i=1}^{N}x_{i})-2(\\frac{1}{N}\\sum_{i=1}^{N}x_{i}y_{i}) \\end{aligned} $$$$ \\begin{aligned} \u0026\\frac{\\partial}{\\partial b}L(m,b)=\\frac{2}{N}\\sum_{i=1}^{N}mx_{i}+b-y_{i}\u0026 \\text{(5)} \\\\ \u0026=2m(\\frac1N\\sum_{i=1}^Nx_i)+2b-2(\\frac1N\\sum_{i=1}^Ny_i) \\end{aligned} $$公式4和5是损失函数对$m$和$b$的求导。 $$ \\bar{x}=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}{\\quad}\\bar {y}=\\frac{1}{N}\\sum_{i=1}^{N}y_{i}\\\\s^{2}=\\frac{1}{N}\\sum_{i=1}^{N}{x_{i}}^{2}{\\quad}\\rho=\\frac{1}{N}\\sum_{i=1}^{N}x_{i}y_{i} \\tag6 $$ 我们发现公式中有一些共有的部分而且都是常量，可以用公式6的方法表示。 $$ \\frac{\\partial}{\\partial m}L(m,b)=0\\Rightarrow ms^{2}+b\\bar{x}-\\rho=0\\\\\\frac{\\partial}{\\partial b}L(m,b)=0\\Rightarrow m\\bar{x}+b-\\bar{y}=0 \\tag7 $$ 令$\\frac{\\partial}{\\partial m}L(m,b)$和$\\frac{\\partial}{\\partial b}L(m,b)$为0。 $$ m^*=\\frac{\\rho-\\bar x\\bar y}{s^2-\\bar x^2}\\quad b^*=\\bar y-\\bar xm^*\\tag8 $$ 以上就是一元线性回归的最小二乘法求解过程。\n代码案例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import numpy as np import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # 线性回归 # 一、导入数据 # 样本数据集，第一列为x，第二列为y，在x和y之间建立回归模型 data=[ [0.067732,3.176513],[0.427810,3.816464],[0.995731,4.550095],[0.738336,4.256571],[0.981083,4.560815], [0.526171,3.929515],[0.378887,3.526170],[0.033859,3.156393],[0.132791,3.110301],[0.138306,3.149813], [0.247809,3.476346],[0.648270,4.119688],[0.731209,4.282233],[0.236833,3.486582],[0.969788,4.655492], [0.607492,3.965162],[0.358622,3.514900],[0.147846,3.125947],[0.637820,4.094115],[0.230372,3.476039], [0.070237,3.210610],[0.067154,3.190612],[0.925577,4.631504],[0.717733,4.295890],[0.015371,3.085028], [0.335070,3.448080],[0.040486,3.167440],[0.212575,3.364266],[0.617218,3.993482],[0.541196,3.891471] ] # 二、生成矩阵 #生成X和y矩阵 dataMat = np.array(data) X = dataMat[:,0:1] # 变量x y = dataMat[:,1] #变量y # 三、线性回归 model = LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1, normalize=False) model.fit(X, y) # 线性回归建模 print(\u0026#39;系数矩阵:\\n\u0026#39;,model.coef_) print(\u0026#39;线性回归模型:\\n\u0026#39;,model) # 使用模型预测 predicted = model.predict(X) plt.scatter(X, y, marker=\u0026#39;x\u0026#39;) plt.plot(X, predicted,c=\u0026#39;r\u0026#39;) plt.xlabel(\u0026#34;x\u0026#34;) plt.ylabel(\u0026#34;y\u0026#34;) 具体思路如下：\n首先从文件中导入数据并进行处理\n然后对列表进行切片，提取出X和y，可利用 dataMat.shape查看数据的格式，这里面返回结果应当是(30,2)\n最后进行线性回归，这里由于版本问题有一个错误，例如，你有可能在运行时出现\n​\t这是由于在scikit-learn的0.22版本中，这个参数normalize被移除了，normalize的作用是对特征进行标准化。可以将其直接去掉。\n​\n讲解一下 LinearRegression的参数配置：\nfit_intercept：bool, default=True\n​\t是否计算此模型的截距。如果已设置 设置为 False，则计算中不会使用任何截距 （即数据应居中）。\ncopy_X：bool, default=True\n​\t如果为 True，则将复制 X;否则，它可能会被覆盖。\nn_jobs：int, default=None\n​\t用于计算的作业数。这只会提供 speedup 在出现足够大的问题时，即 first 和 second 是稀疏的，或者如果设置了 自。 表示 1，除非在上下文中。 表示使用全部 处理器。有关更多详细信息，请参阅术语表 。n_targets \u0026gt; 1XpositiveTrueNone-1\npositive：bool, default=False\n​\tWhen set to , forces the coefficients to be positive. This option is only supported for dense arrays.True\n","date":"2024-09-18T20:51:45+08:00","permalink":"https://Sazerac-kk.github.io/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/","title":"深度学习基础：线性回归"},{"content":"环境准备 下载Hugo 官网址：Hugo官网\nGithub地址:gohugoio/hugo\n点击Github，点击Tags，选择合适的版本下载。\n下载git 点击Git官网https://cdn.jsdelivr.net/gh/Sazerac-kk/pictures/img/image1.png\n点击 Download for Windows 按照指引安装即可。\n搭建博客 创建Blog 解压hugo_extended_0.134.2_windows-amd64.zip文件，点击进入并cmd打开命令行窗口，输入hugo new site xxxx创建文件（我这里是dev）。\n但是新创建的dev文件夹里面没有hugo.exe文件，为了使在dev文件下仍能使用hugo命令，需要复制hugo.exe文件到dev文件内。\n在命令行中切换到已创建好的dev文件夹，输入hugo server -D，运行成功出现以下界面：\n打开浏览器输入http://localhost:1313/发现会出现以下界面：\n这是因为还未下载主题，可以看到dev\\themes文件夹下为空。\n下载主题 再次进入Hugo官网。\n点击Themes选择一款适合的主题，作为演示，我选择的是Stack这款主题。\n点击Download进入主题github界面，并选择适当的版本下载。\n将文件解压存储在dev\\themes文件下，并将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml。\n修改themes文件夹下面主题文件夹的名字，使其和hugo.yaml中的一样。\n再次在命令行中输入hugo server -D，查看主题，发现已经正确显示。\nGithub部署 常规部署 准备工作：创建一个自己的github账号。\n新建仓库，命名要用{github用户名}.github.io，如果这是你搭建的第一个博客，这一步最好在前面用自己的用户名，这会避免很多Bug（也许是我太菜了~）。\n然后进入自己的仓库，前往setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址。（注意：仓库需要设置为public）\n然后我们就可以往github仓库上传文件了，先回到dev文件下，进入命令行界面，输入hugo -D生成public文件夹。\n在public文件夹下执行以下命令上传到github仓库上面。\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 上传成功后访https://{github用户名}.github.io，成功搭建属于自己的Hugo博客。\nGithub Action自动部署 Github上面重新建一个仓库，用于存放Hugo的主文件，可以设置为private。\n前往settings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic)。\ntoken选择永不过期，并且勾选repo和workflow选项。\n为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置。（注意：token只能显示一次，可事先保存）\n在hugo主文件创建一个.github/workflows/xxxx.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 在hugo主文件创建.gitignore文件，来避免提交不必要的文件。\n1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe 将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面。\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main 参考资料 “【Hugo】Hugo + Github 免费部署自己的博客.” 莱特雷-letere, 30 Aug. 2024 【Hugo】Hugo + Github 免费部署自己的博客 (letere-gzj.github.io)\n原文视频\n","date":"2024-09-17T21:26:39+08:00","image":"https://cdn.jsdelivr.net/gh/Sazerac-kk/pictures/img/202409181730842.png","permalink":"https://Sazerac-kk.github.io/p/%E6%95%99%E7%A8%8Bhugo-github%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/","title":"【教程】Hugo+Github博客部署"},{"content":"快速扫盲 深度学习(deeplearning)包含很多向量或矩阵的运算，因此对线性代数有足够的了解是非常必要的\n其中最主要的知识点包括：\n标量、向量、矩阵和张量，以及矩阵的转置运算\n矩阵和向量乘法\n矩阵乘法 (叉乘) $$ C_{i, j}=\\sum_{k} A_{i, k} B_{k, j} $$ Hadamard乘积 指两个矩阵中对应元素的乘积 单位矩阵和逆矩阵\n线性相关和线性无关\n生成子空间\n范数\n正交矩阵和标准正交\n特征分解（平衡分布） $$ A = QAQ^T $$ 奇异值分解\nMoore- Penrose伪逆\n迹运算\n行列式\n教材资源：线性代数与解析几何\n提取码：5sz2\n","date":"2024-09-17T21:00:13+08:00","image":"https://Sazerac-kk.github.io/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/mansuiyanhua_hu17338915106485599663.jpg","permalink":"https://Sazerac-kk.github.io/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/","title":"深度学习预备知识：线性代数"},{"content":"matplotlib.pyplot是 matplotlib 的基于状态的接口。它提供了一种隐式的、类似 MATLAB 的绘图方式。它还会在屏幕上打开图形，并充当图形 GUI 管理器。\n1、显示窗口和隐式窗口 1）pyplot 主要用于交互式绘图和程序化绘图生成的简单情况，而对于复杂绘图，建议使用显示的面向对象的API，此时pyplot用于创建图形有一集图形中的轴。\n2）请参阅pyplot.figure、pyplot.subplots、 和 pyplot.subplot_mosaic创建图形，以及 轴 API以了解轴上的绘图方法。有关隐式接口和显式接口之间权衡的说明，请参阅Matplotlib 应用程序接口 (API) 。\n2、管理图像和轴 1)axes:将Axes添加到当前图形并使其成为当前Axes。 Call signatures:\nParameters:\narg : None or 4-tuple\n​None:一个用subplot(**kwargs)生成的新的窗口Axes\n​4-tuple : rect = (left, bottom, width, height)，以此为标准创建了一个新的轴。\nProjection:{None, \u0026lsquo;aitoff\u0026rsquo;, \u0026lsquo;hammer\u0026rsquo;, \u0026rsquo;lambert\u0026rsquo;, \u0026lsquo;mollweide\u0026rsquo;, \u0026lsquo;polar\u0026rsquo;, \u0026lsquo;rectilinear\u0026rsquo;, str}\n可选的投影类型，None代表直线\n详情见：projections\nmatplotlib.projections.get_projection_names()返回当前注册的所有投影的名称\nPolar: bool, default ,:False # 极性\n如果为True 代表投影=‘极坐标’ Sharex, sharey: Axes ,可选：\naxis与 sharex 和/或 sharey共享 x 或 y 。该轴将具有与共享轴相同的限制、刻度和比例。 Label: str\nAxes返回的标签 Return：\nAxes或者子类Axes：\n返回的类型取决于projection，直线：Axes; 极坐标：projections.polar.PolarAxes\n其他参数：\nkwargs：详情请见axes 2）其他: axes 将 Axes 添加到当前图形并使其成为当前 Axes。 cla 清除当前轴。 clf 清除当前数字。 close 关闭图形窗口。 delaxes Axes从图中删除一个（默认为当前轴）。 fignum_exists 返回给定 id 的图窗是否存在。 figure 创建新图窗，或激活现有图窗。 gca 获取当前的轴。 gcf 获取当前数字。 get_figlabels 返回现有图形标签的列表。 get_fignums 返回现有图号的列表。 sca 将当前 Axes 设置为ax并将当前Figure 设置为ax的父级。 subplot 将轴添加到当前图形或检索现有轴。 subplot2grid 在常规网格内的特定位置创建子图。 subplot_mosaic 基于 ASCII 艺术或嵌套列表构建轴布局。 subplots 创建一个图形和一组子图。 twinx 制作并返回共享x轴的第二个轴。 twiny 创建并返回共享y轴的第二个轴。 3、将数据添加到图中 基本：\nplot 将 y 与 x 绘制为线条和/或标记。 errorbar 将 y 与 x 绘制为带有误差条的线条和/或标记。 scatter y与y的散点图 plot_date [不鼓励] 绘制强制轴将浮点数视为日期的图。 step 制作一个步骤图。 loglog 在 x 轴和 y 轴上绘制对数缩放图。 semilogx 在 x 轴上绘制对数缩放图。 semilogy 在 y 轴上绘制对数缩放图。 fill_between 填充两条水平曲线之间的区域。 fill_betweenx 填充两条垂直曲线之间的区域。 bar 绘制条形图。 barh 绘制水平条形图。 bar_label 标记条形图。 stem 创建一个茎图。 eventplot 在给定位置绘制相同的平行线。 pie 绘制饼图。 stackplot 绘制堆积面积图。 broken_barh 绘制矩形的水平序列。 vlines 在每个x 处绘制从ymin到ymax 的垂直线。 hlines 在每个y 处绘制从xmin到xmax 的水平线。 fill 绘制填充多边形。 polar 绘制极坐标图。 二维数组：\nimshow 将数据显示为图像，即在二维规则光栅上。 matshow 在新的图窗窗口中将数组显示为矩阵。 pcolor 使用不规则矩形网格创建伪彩色图。 pcolormesh 使用不规则矩形网格创建伪彩色图。 spy 绘制二维数组的稀疏模式。 figimage 将未重新采样的图像添加到图中。 文本和注释：\nannotate 用文本text注释点xy。 text 将文本添加到轴。 figtext 向图中添加文本。 table 将表添加到Axes. arrow 向轴添加箭头。 figlegend 在图上放置图例。 legend 在轴上放置一个图例。 4、轴配置： autoscale 根据数据自动缩放轴视图（切换）。 axis 获取或设置某些轴属性的便捷方法。 box 打开或关闭当前轴上的轴框。 grid 配置网格线。 locator_params 主要蜱虫定位器的控制行为。 minorticks_off 删除轴上的小刻度。 minorticks_on 在轴上显示小刻度。 rgrids 获取或设置当前极坐标图上的径向网格线。 thetagrids 获取或设置当前极坐标图上的 theta 网格线。 tick_params 更改刻度、刻度标签和网格线的外观。 ticklabel_format 配置ScalarFormatter线性轴的默认使用。 xlabel 设置 x 轴的标签。 xlim 获取或设置当前轴的 x 限制。 xscale 设置 x 轴的比例。 xticks 获取或设置 x 轴的当前刻度位置和标签。 ylabel 设置 y 轴的标签。 ylim 获取或设置当前轴的 y 限制。 yscale 设置 y 轴的比例。 yticks 获取或设置 y 轴的当前刻度位置和标签。 suptitle 向图中添加居中的副标题。 title 为轴设置标题。 5、布局： margins 设置或检索自动缩放边距。 subplots_adjust 调整子图布局参数。 subplot_tool 启动图形的子图工具窗口。 tight_layout 调整子图之间和子图周围的填充。 6、颜色映射： clim 设置当前图像的颜色限制。 colorbar 将颜色条添加到绘图中。 gci 获取当前的可着色艺术家。 sci 设置当前图像。 get_cmap 获取一个颜色图实例，如果name为 None，则默认为 rc 值。 set_cmap 设置默认颜色图，并将其应用到当前图像（如果有）。 imread 将图像从文件读取到数组中。 imsave 颜色映射并将数组保存为图像文件。 7、输出： draw 重新绘制当前图形。 draw_if_interactive 如果处于交互模式，则重绘当前图形。 ioff 禁用交互模式。 ion 启用交互模式。 install_repl_displayhook 连接到当前shell的显示钩子。 isinteractive 返回每个绘图命令后是否更新绘图。 pause 将 GUI 事件循环运行间隔秒。 savefig 保存当前图形。 show 显示所有开放数字。 switch_backend 设置 pyplot 后端。 uninstall_repl_displayhook 与当前 shell 的显示挂钩断开连接。 8、其他详见： https://matplotlib.org/stable/api/pyplot_summary.html\n","date":"2024-09-17T00:00:00Z","image":"https://Sazerac-kk.github.io/p/the-use-of-matplotlib/image_hu13700394000997497419.png","permalink":"https://Sazerac-kk.github.io/p/the-use-of-matplotlib/","title":"The use of matplotlib"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://Sazerac-kk.github.io/p/math-typesetting/","title":"Math Typesetting"}]